[
{
	"uri": "/6-iam-role-credential-exfiltration/1-create-findings/",
	"title": "Creating Findings",
	"tags": [],
	"description": "",
	"content": "Generate Findings Manually\nMock Attacks and Findings will be automatically generated from the CloudFormation Template, except for a Finding. For this Finding, you will need to do some specific steps like:\n Copy the temporary IAM security credential from the EC2 instance. Manually make an API call from a personal computer.   To generate this Finding, we must make an API call coming from outside of the AWS network.\n Content\n Get a temporary IAM security credential with the Systems Manager Create AWS CLI Profile on PC Execute AWS CLI statements using IAM security credential temporarily  Get a temporary IAM security credential with the Systems Manager To simulate this final attack, you need to successfully retrieve the temporary IAM security credential generated by the IAM role on the EC2 instance. We can try 1 of 2 ways:\n SSH access to the EC2 instance and query the Metadata data of the EC2 instance. Use the Session Manager functionality of the AWS System Manager service.  Access the System Manager Console at us-west-2. In the left-hand navigation bar, select Fleet Manager, and we will see a managed EC2 instance with the following name format - GuardDuty-Example: Compromised Instance: Scenario 3 with status * SSM Agent ping status* is Online.    Proceed to use the Session Manager function by pressing the Instance actions button and selecting Start Session.  Execute data query Metadata:  curl http://169.254.169.254/latest/meta-data/iam/security-credentials/GuardDuty-Example-EC2-Compromised Take note of some important information below  Access Key ID Secret Access Key Session Token    Create AWS CLI Profile on PC After successfully accessing the temporary IAM security credential, we will proceed to create an AWS CLI Profile on the personal computer. From Terminal/CMD/PowerShell, we proceed to replace the \u0026lt;PLACEHOLDER\u0026gt; with the specific value we have collected, then enter the following commands:\naws configure set profile.badbob.region us-west-2 aws configure set profile.badbob.aws_access_key_id \u0026lt;ACCESS_KEY_ID\u0026gt; aws configure set profile.badbob.aws_secret_access_key \u0026lt;SECRET_ACCESS_KEY\u0026gt; aws configure set profile.badbob.aws_session_token \u0026lt;SESSION_TOKEN\u0026gt;  We can check if Profile has been created by going to where AWS security credentials /cli-configure-files.html#cli-configure-files-where).\n We can use the following command to perform a quick check to see if there is an AWS CLI Profile named badbob.\naws configure --profile badbob Execute AWS CLI statements using IAM security credential temporarily Using the AWS CLI statements below, we make API calls to various AWS services.\n IAM user has any permissions?\naws iam get-user --profile badbob aws iam create-user --user-name Chuck --profile badbob  Is there access to DynamoDB?\naws dynamodb list-tables --profile badbob aws dynamodb describe-table --table-name GuardDuty-Example-Customer-DB --profile badbob  Is there permission to query data to DynamoDB?\naws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb put-item --table-name GuardDuty-Example-Customer-DB --item \u0026#39;{\u0026#34;name\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;Joshua Tree\u0026#34;},\u0026#34;state\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;Michigan\u0026#34;} ,\u0026#34;website\u0026#34;:{\u0026#34;S\u0026#34;:\u0026#34;https://www.nps.gov/yell/index.htm\u0026#34;}}\u0026#39; --profile badbob aws dynamodb scan --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb delete-table --table-name GuardDuty-Example-Customer-DB --profile badbob aws dynamodb list-tables --profile badbob  Is it possible to access the System Manager Parameter Store?\naws ssm describe-parameters --profile badbob aws ssm get-parameters --names \u0026#34;gd_prod_dbpwd_sample\u0026#34; --profile badbob aws ssm get-parameters --names \u0026#34;gd_prod_dbpwd_sample\u0026#34; --with-decryption --profile badbob aws ssm delete-parameter --name \u0026#34;gd_prod_dbpwd_sample\u0026#34; --profile badbob "
},
{
	"uri": "/",
	"title": "Getting Hands on with Amazon GuardDuty",
	"tags": [],
	"description": "",
	"content": "Getting Hands on with Amazon GuardDuty Overview With Amazon GuardDuty, a fully managed service by AWS, this exercise will cover how to detect system threats and remediate them. We will conduct analysis, assessment and how to alarm and remediate security issues based on the findings (Findings) of GuardDuty.\nTo prepare for this exercise, using the built-in CloudFormation Template, we will reproduce the attacks and automated fixes by combining EventBridge Event Rules and Lambda Functions.\n Level: 300 Duration: 1-2 hours Requirement: IAM User (Admin) and AWS CLI Functions of CSF (Cybersecurity Framework):  Protect (Protect) Detect (Detect) Feedback (Respond)   Security Perspectives of CAF (Cloud Adoption Framework):  Preventative (Ability to prevent) Detective (Traceability) Responsive   AWS Services Used:  Amazon EventBridge Amazon GuardDuty AWS CloudTrail AWS Lambda VPC Security Groups Amazon SNS    Establish  The exercise will be set at us-west-2 (Oregon).\n For more details, see Environment Setup.\nSituation The exercise will cover the following scenarios:\n   Order Name Specification Solution     1 Compromised EC2 instance Detect and recover hacked EC2 instances Combination of Amazon GuardDuty, Amazon EventBridge Event Rules and AWS Lambda   2 Compromised IAM credentials Identify an individual who is actively calling an API to the system on AWS Fix this hazard immediately (manually)   3 IAM role exfiltration Through a leaked credential, an individual is attempting to hack and call the API from an external server Fix it with AWS Lambda    Clean up Details are in Environment Cleanup.\nContent  Environment Setup How does GuardDuty Work? Scenario 1: Compromised EC2 instance Scenario 2: Compromised IAM credentials Scenario 3: IAM role exfiltration Summary Cleanup environment  "
},
{
	"uri": "/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview With Amazon GuardDuty, a fully managed service by AWS, this exercise will cover how to detect system threats and remediate them. We will conduct analysis, assessment and how to alarm and remediate security issues based on the findings (Findings) of GuardDuty.\nTo prepare for this exercise, using the built-in CloudFormation Template, we will reproduce the attacks and automated fixes by combining EventBridge Event Rules and Lambda Functions.\n Level: 300 Duration: 1-2 hours Requirement: IAM User (Admin) and AWS CLI Functions of CSF (Cybersecurity Framework):  Protect (Protect) Detect (Detect) Feedback (Respond)   Security Perspectives of CAF (Cloud Adoption Framework):  Preventative (Ability to prevent) Detective (Traceability) Responsive   AWS Services Used:  Amazon EventBridge Amazon GuardDuty AWS CloudTrail AWS Lambda VPC Security Groups Amazon SNS    Establish  The exercise will be set at us-west-2 (Oregon).\n For more details, see Environment Setup.\nSituation The exercise will cover the following scenarios:\n   Order Name Specification Solution     1 Compromised EC2 instance Detect and recover hacked EC2 instances Combination of Amazon GuardDuty, Amazon EventBridge Event Rules and AWS Lambda   2 Compromised IAM credentials Identify an individual who is actively calling an API to the system on AWS Fix this hazard immediately (manually)   3 IAM role exfiltration Through a leaked credential, an individual is attempting to hack and call the API from an external server Fix it with AWS Lambda    Clean up Details are in Environment Cleanup.\n"
},
{
	"uri": "/6-iam-role-credential-exfiltration/2-senario/",
	"title": "Credential Exfiltration",
	"tags": [],
	"description": "",
	"content": "Contents\n Architecture Overview Investigation process Review questions  Architecture Overview  Remote server accesses EC2 compromised instance and steals IAM role credential through Metadata data. This server sets up the AWS CLI Profile to make API calls to the AWS account. GuardDuty generates related Findings and sends them simultaneously to the GuardDuty console and EventBridge Events. EventBridge Event Rule activates SNS Topic and Lambda Function. SNS Topic proceeds to send an E-mail notification with Finding details. Lambda Function assigns a new policy to revoke all active Sessions.  Investigation process  Go to GuardDuty Console\nTo conduct a review of the Findings:\n Access GuardDuty Console at us-west-2 We will see Findings in the following format - UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.  If there isn\u0026rsquo;t any Finding, proceed to press the Refresh button and wait. From Finding - UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration, we can easily retrieve some of the following information:  High Severity Notice that someone intentionally used the IAM role credential outside the EC2 instance     Each GuardDuty Finding will be assigned a specific severity - Low/Medium/High. These levels are defined by AWS, they are used to classify and define\n  Check EventBridge Event Rule\n Access the CloudWatch Console at us-west-2. In the left-hand navigation bar, under Events, select Rules. You will see 3 rules have been set up (by CloudFormation Template), starting with a prefix of the following from GuardDuty-Event.. Proceed to select the rule named GuardDuty-Event-IAMUser-InstanceCredentialExfiltration.  In the Event Pattern section, we can easily see the data source that this Event will record and proceed to trigger Target when there are any events.   You can create an EventBridge Event Rule to record events of a particular type of Finding or any type of Finding.\n The following is an example to document any GuardDuty Findings events.\n{\r\u0026#34;detail-type\u0026#34;: [\r\u0026#34;GuardDuty Finding\u0026#34;\r],\r\u0026#34;source\u0026#34;: [\r\u0026#34;aws.guardduty\u0026#34;\r]\r}  Check the Remediation process with Lambda Function\nAlice has set up the Remediation process to automatically respond to this threat through the Lambda function. We can check the programmed code to understand more about this process.\n Access the Lambda Console at us-west-2. In the left hand navigation bar, select Functions and search for GuardDuty-Example-Remediation-InstanceCredentialExfiltration.  Basically, this Lambda function will retrieve information about IAM Role from Finding and proceed to add IAM Policy.   What Permissions does the Lambda Function need to perform the Remediation process? Is there a possible risk with the current Permissions level?\n  Verify the Remediation Process\nTo verify that Finding InstanceCredentialExfiltration has been completely resolved, we will proceed with the following steps in turn.\n Verify via AWS CLI  Execute the following command:\naws dynamodb list-tables --profile badbob We will get AccessDeniedException return for the command to execute.\n Verify via AWS Console  Conduct an evaluation of the IAM Policy that was added to the IAM Role during the Remediation process.\n Access the IAM Console. In the left hand navigation bar, select Roles and search for GuardDuty-Example-EC2-Compromised. This is the IAM Role that we will identify through GuardDuty Finding.  Click the Permissions bar, click on the IAM Policy RevokeOldSessions.  Review questions  What are the risks involved in the Remediation process? Are there other EC2 instances that also use this IAM Role?  "
},
{
	"uri": "/2-environment-setup/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation The exercise will be set at us-west-2 (Oregon).\n\rContents\n Preparation Prerequisites Implementation AWS Resources Prepared?  Prerequisites  AWS Account: An account for the TESTING environment. Administrator rights: Make sure you are using an IAM user with Administrator privileges. AWS CLI: Make sure you are ready to use the AWS CLI to simulate attacks from your computer.  Implementation  Activate Amazon GuardDuty\n Sign in to AWS Console, and access the [GuardDuty] service (https://us-west-2.console.aws.amazon.com/guardduty/home). Start by selecting Get Started.  For new accounts, AWS will give us a 30-day trial, to start using, click the Enable GuardDuty button.   Prepare resources with AWS CloudFormation\n Sign in to AWS Console, access the [CloudFormation] service (https://us-west-2.console.aws.amazon.com/cloudformation/home) Proceed to create a new Stack by pressing the Create Stack button. On the Specify template page,   Download the template at here Proceed to upload an existing Template by using the Upload a template file button.  On the Parameters page, we will enter some required information as follows:  EmailAddress: Personal Email account to be able to receive notifications.    On the Specify Stack Details page, select the Next button. On the Configure stack options page, select the Next button. On the Capabilities page, proceed to accept (Acknowledge) to allow the Template to create IAM roles, and finally select the Create Stack button.  The above process will take 5-10 minutes until we see the status of the Stack as CREATE_COMPLETE. We will receive an email notification with the same subject as AWS Notification - Subscription Confirmation.\n\rInitial results will show 10 minutes after the CloudFormation Stack setup is completed.\nAWS Resources Prepared? CloudFormation Template will prepare us with the following resources:\n EC2 Service:  2 instances named Compromised Instance. 1 instance named Malicious Instance.   IAM service:  1 IAM Role for EC2 instance with access to SSM Parameter Store and DynamoDB.   SNS service:  1 SNS Topic send notifications via E-mail.   EventBridge Service:  3 EventBridge Events Rules for triggering notifications and remediation process.   Lambda Service:  2 Lambda Functions to fix the vulnerabilities.   SSM service:  1 SSM Parameter Store is used to store the password for the TESTING environment.    "
},
{
	"uri": "/3-how-it-works/",
	"title": "About GuardDuty",
	"tags": [],
	"description": "",
	"content": "Content\n Data sources Findings  Data sources Since being activated in an AWS Region, GuardDuty conducts analysis of all data coming from:\n VPC Flow Logs CloudTrail Logs DNS Logs  DNS cached logs come from DNS resolvers (owned by AWS) for VPCs and are not directly accessible from the user side. If the DNS resolver is configured independently by yourself or from a third party, GuardDuty will not be able to retrieve, process and identify threats from this data source.    GuardDuty can access all data sources (mentioned above) even if they have not been activated before.\nAWS recommends enabling CloudTrail Logs and VPC Flow Logs concurrently to get the best overview and detail when conducting data analysis.\n\rGuardDuty is a Regional service, so to be able to track data in an AWS Region, you must enable it in that AWS Region.\nYou can enable it through the AWS Console or using APIs. Most users will activate in all AWS Regions and AWS Accounts simultaneously via APIs.\n\rNo matter how small or large you have AWS resources (such as VPCs or IAM users), GuardDuty will not have any effect on any resources as the processing will only be performed internally. set inside the GuardDuty service.\nGuardDuty is a fully managed service by AWS.\n\rGuardDuty\u0026rsquo;s pricing will be based on\n Number of CloudTrail events analyzed Volume of VPC flow logs (in GB) Volume of DNS log (in GB)  Each AWS account will have a 30-day trial in each AWS Region, which will make it easier for GuardDuty to predict costs incurred.\n\rFindings GuardDuty will actively observe and monitor any abnormal signs\n From 3 data sources (mentioned above) From EC2 instances From AWS IAM resources  You will easily access the details of Findings detected by GuardDuty in the Findings bar. Each Finding will be broken down into multiple pieces of information in a format that allows us to easily read and deal with security risks.\nThreatPurpose : ResourceTypeAffected / ThreatFamilyName . ThreatFamilyVariant ! Artifact \rLearn more about the components of the above format here.\n\rFor highly unpredictable cases and behaviors, in order to learn them and analyze anomalies, GuardDuty\u0026rsquo;s Machine Learning engine will need a baseline period of 7 to 14 days.\n**For example: **\n An EC2 instance initiates communication with a remote server through an unusual port. An IAM user starts changing Route Tables while not doing this before.  For the above cases, all searches will be based on Signatures, so they will be discovered within 10 minutes of the CloudFormation stack being completed. In the process of threat detection, the delay will be more or less based on the frequency of occurrence of the relevant information and the total time that GuardDuty can retrieve and analyze such information at the data sources. specific material.\nLearn more about the full list of GuardDuty Findings series here\n\rWhen there are any changes at Findings, based on the settings coming from Amazon CloudWatch Events, GuardDuty will send you a notification immediately within 5 minutes. Any related changes from subsequent iterations will have the same ID as the original Finding, and notifications will be sent every 6 hours from the first submission, to deal with the massive influx of notifications within the same Finding. to the user.\n"
},
{
	"uri": "/4-compromised-ec2-instance/",
	"title": "Compromised EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Scenario 1: Compromised EC2 Instance\nAs usual, you arrive at the office early on Monday morning, prepare a cup of coffee, sit down and open your laptop, starting a series of routine tasks like sending E-mails and writing plans. Suddenly, you start receiving a stream of E-mails with content related to the latest detection of threats, which you have never seen before, however you start to learn and investigate. right away. The good news is that your colleague Alice has already set up automatic responses for those Findings so they are resolved instantly.\nThe first E-mail you received with your EC2 instance may have been compromised as follows:\nGuardDuty Finding | ID: 1xx: The EC2 instance i-xxxxxxxxx may be compromised and should be evaluated The content of the second E-mail immediately after that you received with the situation resolved immediately is as follows:\nGuardDuty Remediation | ID: 1xx: GuardDuty discovered an EC2 instance (Instance ID: i-xxx) that is communicating outbound with an IP Address on a threat list that you uploaded. All security groups have been removed and it has been isolated. Please follow up with any additional remediation actions. Content\n Architecture overview Investigation process Review questions  Architecture overview  An EC2 compromised instance sends pings to the EIP address of a malicious EC2 instance. That EIP address has been added to Custom Threat List. GuardDuty conducts monitoring of VPC Flow Logs (including CloudTrail and DNS Logs) and situation analysis based on Machine Learning, Custom Threat List, and others. GuardDuty generates a Finding and displays it on the GuardDuty Console and sends the event to EventBridge Events. Based on this event, the EventBridge Event Rule reacts and simultaneously activates the SNS Topic and Lambda Function respectively. SNS Topic will send an E-mail with Finding details to you. Lambda Function will isolate EC2 compromised instance.  When Alice sets up an E-mail notification for this event, she adds only certain information about that Finding and configures the Lambda Function to automatically isolate the EC2 compromised instance. Even though Finding has been resolved, you still decide to dig into more detail about these current settings and configurations of Alice.\nInvestigation process  Go to GuardDuty Console\nWhile you can see these Findings from the GuardDuty Console, most customers want to bring them together, from AWS Regions and AWS Accounts to a centralized secure data management system (SIEM) ) to conduct analysis and perform the Remediations process. The most common approach is to configure GuardDuty under an Admin/Member model and use a combination of EventBridge Event Rules and Lambda Functions to push these Findings to SIEM or a ** Centralized Logging Framework**. There are also many solutions from AWS partners that help customers make data push and consolidation tasks as easy as possible.\n Access GuardDuty Console at us-west-2 We should see a Finding with the following format UnauthorizedAccess:EC2/MaliciousIPCaller.Custom.  If there isn\u0026rsquo;t any Finding, proceed to press the Refresh button and wait.   Findings can be retrieved from the GuardDuty console for 90 days.\n  Based on the format reviewed in detail in the previous section, what security incident can you pinpoint through the Finding style?\n  In your environment, this type of Finding indicates that an EC2 instance is communicating to an IP address (added to Threat Lists). Select Lists in the navigation bar (left-hand side) to see the Threat List that Alice added previously - Example-Threat-List.   GuardDuty uses Threat Intelligence systems provided by the AWS Security team and 3rd parties such as ProofPoint and CrowdStike. You can extend GuardDuty\u0026rsquo;s visibility by manually configuring the Trusted IP Lists (Trusted IP Lists) and the Threat Lists (Threat Lists). If you have set up GuardDuty under the Admin/Member structure, from the GuardDuty Admin account you can manage the lists above and let the Members accounts inherit. By default, Members accounts will not be able to edit these lists.\n In this emulation scenario, EC2 compromised instance only accesses EIP of another EC2 instance in the same VPC to internalize the emulation process and data processing that only occurs in the same environment. your school. The CloudFormation template will automatically create a threat list (Threat Lists) and assign this EIP address to it.\n\r Check EventBridge Event Rule\nAlice uses the EventBridge Event Rules to notify you of the Findings along with the steps of the Remediations process. Shall we conduct a more detailed survey to understand what Alice has set up and how does this work?\n Access the EventBridge Console at us-west-2. In the left-hand navigation bar, under Events, select Rules. You will see 3 rules have been set up (by CloudFormation Template), starting with a prefix of the form GuardDuty-Event.  Proceed to select the rule named GuardDuty-Event-EC2-MaliciousIPCaller.  You will easily notice that there are 2 targets in the Targets area.  Lambda Function SNS Topic: Proceed to send E-mail notifications to you based on data provided by EventBridge Event Rule. Instead of the entire JSON data being used, by using Input Transformer, Alice customized the message content.     Check Remediation process based on Lambda Function\nThe Lambda Function is the key that holds the logic to perform the steps of the Remediations process for Findings. Alice has set up a Lambda Function to remove and replace the Security Group of the EC2 compromised instance with a Security Group that does not contain any Ingress/Egress rules. This will help isolate the EC2 compromised instance from the current network.\nTo test the Remediation process:\n From the GuardDuty-Event-EC2-MaliciousIPCaller rule, in the Targets area, in the Type section is Lambda Function, we search for the corresponding Resource Name.  At the Lambda Function console, search for Resource Name following the previous step.  We can look at some items  Configuration  In the Designer bar, we will easily see the relationship with the EventBridge Event Rule. In the Function code section, the coding logic will be executed here.   Permissions Monitoring     Confirm Remediation was successful\nTo ensure the results of the Remediation process, we need to see if the EC2 instance is isolated or not. At this point, you have received an E-mail with some important information.\n Access the EC2 console at us-west-2. Select Instances (Running), they will see 3 EC2 instances with prefixes starting with the following format GuardDuty-Example.  Based on the instance ID from GuardDuty Finding or the E-mail message, we choose the corresponding EC2 instance - GuardDuty-Example: Compromised Instance: Scenario 1.  After the Remediation process is completed, we will check Security Group of this EC2 compromised instance, which will have the same name format as ForensicSecurityGroup. ForensicSecurityGroup will not have any Ingress/Egress rules containing IP addresses in Example-Threat-List.  Review questions  What data source was used by GuardDuty to identify this threat? Will isolation affect applications running inside this EC2 instance? How can we add more detailed information to E-mail notifications?  "
},
{
	"uri": "/5-compromised-iam-credentials/",
	"title": "Compromised IAM credentials",
	"tags": [],
	"description": "",
	"content": "Scenario 2: Compromised IAM credentials\nYou have completed the first attack simulator and are back with your cup of coffee. However, you continue to receive new notifications about Findings related to AWS IAM services. The body of the first message indicates that using IAM credentials, some API calls were made from the IP address that was added to the Threat List (in this post). before).\nNo individual IAM credentials have ever been exposed or disclosed in any way.\n\rContent\n Architecture Overview Investigation process Review question  Architecture Overview  This EC2 malicious instance makes API calls, the EIP of this instance has been added to Threat List. The contents of API calls are logged in CloudTrail\u0026rsquo;s logs. GuardDuty observes the logs of CloudTrail Logs along with VPC Flow Logs and DNS Logs, thereby assessing the situation on certain bases. GuardDuty generates corresponding Findings and simultaneously sends details to GuardDuty Console and EventBridge Events. EventBridge Event Rule activates SNS Topic. SNS Topic sends out E-mail notifications with related information.  Investigation process  Go to GuardDuty Console\nTo conduct a review of the Findings:\n Access GuardDuty Console at us-west-2 We will see the Findings in the following format.  Recon:IAMUser. UnauthorizedAccess:IAMUser.     If there isn\u0026rsquo;t any Finding, proceed to press the Refresh button and wait.\n  From Finding - Recon:IAMUser/MaliciousIPCaller.Custom, we can easily retrieve the following information:\n What happened? What AWS resources are affected? When did this event happen?    Under the Resource Affected section, you will find the User Name related to this Finding.\n   Based on the format reviewed in detail in the previous section, what security incident can you pinpoint through the Finding style?\n This finding indicates that the IAM credential of the above User Name could have been exposed by API calls derived from an IP address that was previously added to the Threat List.\n What actions were taken by this IAM User?\n In the Action section, we see that the DescribeParameters action has been performed.\n How can we see all the remaining actions, taken by this IAM User, within the last 1 hour or 1 day ago?\n GuardDuty is capable of analyzing large amounts of data to pinpoint the hazards present in your environment. However, during the investigation and remediation steps, we also need to combine many different data sources to have the most correlated view possible.\nIn this case, the analyst can use insights that can be found in user behavior logs through CloudTrail.\nIAM Findings generated by EC2 malicious instance that made API calls and the EIP of this instance are in Custom Threat List.\n\r Check EventBridge Event Rule\n Access the CloudWatch Console at us-west-2. In the left-hand navigation bar, under Events, select Rules. You will see 3 rules have been set up (by CloudFormation Template), starting with a prefix of the following from GuardDuty-Event.. Proceed to select the rule named GuardDuty-Event-IAMUser-MaliciousIPCaller.  You will easily notice that there is only one target in the Targets area, which is SNS Topic.  As it turned out, Alice had never set up a Lambda Function to perform the Remediation process because the Security team decided that they would proceed manually with this Finding.\n The combination of GuardDuty and EventBridge Events provides flexibility that makes it easy to create an automated Remediation process. Lambda functions or solutions from AWS partners are the top choices.\n For certain Findings, we may end up configuring notifications and resolving issues manually, rather than automatically. Because when designing the automation process, we will have to pay attention to and evaluate the results that the Remediation process brings, including advantages and disadvantages.\n In addition, we can set Target to some other AWS resources like SSM Run Commands or Step Function State Machine.\n  Resolve the situation\nSince Alice has never set up the Remediation process for this Finding, we need to do it manually. While the Security team is analyzing the behavior of this IAM user to better define the scope of the vulnerability, we need to take some steps to disable Access Key to prevent programming. the next actions.\n Access the IAM Console. In the left-hand navigation bar, select Users.  Based on GuardDuty Finding and E-mail message, we can easily choose IAM user - GuardDuty-Example-Compromised-Simulated. In the user GuardDuty-Example-Compromised-Simulated, we select the Security Credentials bar.  In the Access Keys section, based on the Access Key ID information from Finding, we proceed to press the Make Inactive button.  Review question  What data source was used by GuardDuty to identify this threat? What Permissions are IAM users allowed to use? Why did the Security team decide to go against the automated Remediation process?  "
},
{
	"uri": "/6-iam-role-credential-exfiltration/",
	"title": "Credential Exfiltration",
	"tags": [],
	"description": "",
	"content": "Scenario 3: IAM Role Credential Exfiltration\nContent\n Manually Generate Finding IAM Role Credential Exfiltration  "
},
{
	"uri": "/7-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "Through this exercise, we have taken the steps involved in generating and analyzing the Findings, thereby performing the corresponding Remediation process to solve the problem immediately.\n   Finding Scenario     UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Compromised EC2 Instance   Recon:IAMUser/MaliciousIPCaller.Custom Compromised IAM credentials   UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom Compromised IAM credentials   UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration IAM Role credential exfiltration    "
},
{
	"uri": "/8-environment-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "To perform the cleanup of the AWS resources used in this exercise, we perform the following steps in turn:\n Delete the S3 bucket that was created by the CloudFormation Template with the format guardduty-example. This step is required because the CloudFormation Stack cannot be deleted if the S3 bucket has data inside. Delete the IAM Role that is used for the EC2 compromised instance with the format GuardDuty-Example-EC2-Compromised. Because in a Remediation process, Lambda Function has added an IAM Policy, CloudFormation Stack will not be deleted if the IAM Role appears with other IAM Policy. Remove Custom Threat List used for GuardDuty. Disable the Amazon GuardDuty service.  Go to GuardDuty Console. Click on Settings. Select Disable GuardDuty and click Save.   Delete the CloudFormation Stack. If you can\u0026rsquo;t delete it, check the first step 2 again.  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]